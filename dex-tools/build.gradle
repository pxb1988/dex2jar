plugins {
    id "application"
    id "dex2jar.build-conventions"
}

description = 'Dex/Dalvik tools for dex2jar'

dependencies {
    api project(':dex-translator')
    api project(':d2j-smali')
    api project(':d2j-jasmin')
    api project(':dex-writer')
    api project(':d2j-base-cmd')
    api project(path: ':d2j-external', configuration: 'shadow')
    // api group: 'org.ow2.asm', name: 'asm', version: project.property('asmVersion') // Fixed MethodCodeTooLargeException
    api(group: 'org.ow2.asm', name: 'asm-tree', version: project.property('asmVersion')) {
        exclude(module: 'asm')
    }
    api(group: 'org.ow2.asm', name: 'asm-util', version: project.property('asmVersion')) {
        exclude(module: 'asm')
    }
    api(group: 'org.ow2.asm', name: 'asm-commons', version: project.property('asmVersion')) {
        exclude(module: 'asm')
    }
    testImplementation "org.antlr:antlr-runtime:${project.property('antlr3Version')}"
}

tasks.register('bin_gen', JavaExec) {
    dependsOn jar, ':d2j-external:shadowJar'
    classpath sourceSets.main.runtimeClasspath
    ext.binDir = "${layout.buildDirectory.asFile.get()}/generated-sources/bin"
    outputs.dir file(ext.binDir)
    mainClass.set('com.googlecode.dex2jar.bin_gen.BinGen')
    args = ["$projectDir/src/main/bin_gen", "$ext.binDir"]
}

application {
    applicationDistribution.from(bin_gen)
    applicationDistribution.from('open-source-license.txt') {
        into("lib")
    }
    applicationDistribution.from("$parent.rootDir") {
        include("NOTICE.txt")
        include("LICENSE.txt")
    }
}

startScripts.dependsOn bin_gen

artifacts.archives distZip
